#summary List of all available selection strategies

=RandomBiasBased Selection Strategy=

This strategy bias the selection of the event based on several factors like: Type of event (Input or System), No of time the event has been fired.

For More details refer our paper: http://pag.gatech.edu/pubs/dynodroid.pdf

=RandomBased or Uniform Random Selection strategy=

The*_ Uniform Random strategy picks an event randomly from the set of applicable events _*. This is essentially the strategy used by the Monkey fuzz testing tool, with three key differences. First,Monkey can only generate UI events, preventing it from covering app functionality controlled by system events. Second, Monkey does not compute relevant events and can send many events that are no-ops in the current state, hindering efficiency and conciseness of the generated event sequence. Third, Monkey does not compute a model of the appâ€™s UI, which has pros and cons. On one hand, it prevents Monkey from identifying observationally equivalent UI events (e.g., taps at different
points of the same button that have the same effect, of clicking the button) and hinders efficiency and conciseness; on the other hand, Dynodroid sends mostly fixed inputs to a widget, and may fail to adequately exercise custom widgets (e.g., a game that interprets taps at different points of a widget differently). A drawback of the UniformRandom strategy is that it does not take any domain knowledge into account:it does not distinguish between UI events and system events, nor between different contexts in which an event may occur, nor between frequent and infrequent events. For instance, an event that is always relevant (e.g., an incoming phone call event) stands to be picked disproportionately more often than an event that is relevant only in certain contexts (e.g., only on a particular screen of the app).

=Frequency Based strategy=
The *_Frequency Based strategy selects an event from E that has been selected least frequently by it so far_*. The rationale is that infrequently selected events have a higher chance of exercising new app functionality. A drawback of this strategy is that its deterministic nature leads the app to the same state in repeated runs. In practice, different states might be reached in different runs because of non-determinism inherent in dynamic analysis of Android apps, due to factors such as concurrency and asynchrony however, we cannot rely on them to cover much new app functionality.